####### grammar ########
expr            : KEYWORD:VAR IDENTIFIER EQUAL expr
                : term ((PLUS|MINUS)term)*
term            : factor ((MUL|DIV)factor)*
factor          : (PLUS|MINUS) factor
                : power
power           : atom (POW factor)*
atom            : INT|FLOAT|IDENTIFIER
                : LPAREN expr RPAREN
if-expr         : KEYWORD: IF expr KEYWORD: THEN expr
                : KEYWORD: ELIF expr KEYWORD: THEN expr
                : KEYWORD: ELSE expr 

VAR variable_name = (expr)
keyword identifier equals
IF a == a THEN 'Yes it is' ELSE 'what the fuck'
FOR <var_name> = <start_value> TO <end_value> THEN <expr>
VAR result = 1
FOR i = 0 TO 10 THEN result = result * i


####### input variables examples
Dao > VAR a = 3
3
Dao > VAR b = 12
12
Dao > a * b
36
Dao > a + (a * b)
39
Dao > 4 + (VAR x = 6)
10
Dao > VAR e = VAR o = VAR l = 12
12
Dao > e
12
Dao > l
12
####### input comparisons examples 
Dao > 4 == 4
1
Dao > 4 == 3
0
Dao > 2 < 1
0
Dao > 2 + 6 == 4 * 2
1
Dao > 1 == 1 AND 2 == 2
1
Dao > NULL
0
Dao > TRUE
1
Dao > FALSE
0
######## input IF examples


################################# dao.py ###############################

1. **`Error` Class**: Base class for errors, encapsulating error information such as location (start and end positions), name, and detailed message, crucial for precise error reporting within the language.

2. **`IllegalCharError` Class**: Inherits from `Error`, specifically designed to report instances where the lexer encounters characters that are not recognized within the language's syntax, indicating potential typos or unsupported operations.

3. **`ExpectedCharError` Class**: Extends the `Error` class to handle scenarios where a specific character was anticipated by the parser (like a closing parenthesis or an operator) but was not found in the input stream, aiding in pinpointing syntax mistakes.

4. **`InvalidSyntaxError` Class**: Specialized error class derived from `Error` for flagging violations of the language's syntax rules during parsing, such as incorrect statement structure or improper use of keywords.

5. **`RTError` Class**: Represents runtime errors that occur during the execution phase of the language. It includes additional context information to facilitate tracing the error back through the executed code, enhancing debuggability.

6. **`Position` Class**: Utility class that tracks the position within the source code, including the current index, line, column, and filename, as well as the full text being parsed. This is essential for accurate error localization and token positioning.

7. **`Token` Class**: Represents the fundamental units of the language's syntax as identified by the lexer, categorized by type (such as integer, identifier, operator) and value, with associated position information for precise syntactic analysis.

8. **`Lexer` Class**: Analyzes the input source code text character by character, converting it into a sequence of tokens based on the language's lexical grammar, handling numbers, identifiers, keywords, and a variety of operators.

9. **`make_tokens` Method**: Core function of the `Lexer` class that iterates through the input text, systematically categorizing segments into tokens according to their syntactic role, such as numeric literals, operators, or identifiers.

10. **`make_number` Method**: Dedicated method within the `Lexer` for parsing numerical literals, accurately distinguishing between integer and floating-point numbers based on the presence of a decimal point.

11. **`make_identifier` Method**: Lexer method responsible for identifying and tokenizing identifiers, which can represent variable names or keywords, based on the sequence of letter and digit characters.

12. **`make_not_equals` Method**: Enhances the `Lexer` by adding the capability to recognize the inequality operator ('!='), enriching the language's set of comparison operations.

13. **`make_equals` Method**: Function within the `Lexer` that discerns between the assignment operator ('=') and the equality comparison operator ('=='), based on the context and presence of consecutive equals signs.

14. **`make_less_than` and `make_greater_than` Methods**: Extend the `Lexer`'s functionality to include less-than ('<', '<=') and greater-than ('>', '>=') comparison operators, broadening the language's comparative logic.

15. **`NumberNode` Class**: Node type in the Abstract Syntax Tree (AST) representing numeric literals, encapsulating the corresponding token and its position within the source code.

16. **`VarAccessNode` Class**: AST node type for variable access expressions, holding the token for the variable name, facilitating the retrieval of variable values during interpretation.

17. **`VarAssignNode` Class**: Represents variable assignment operations in the AST, linking a variable name token to a value node, enabling the assignment of values to variables in the language's runtime environment.

18. **`BinOpNode` Class**: AST node for binary operations, encapsulating the left operand, operator token, and right operand, supporting arithmetic, comparison, and logical operations within the language's expressions.

19. **`UnaryOpNode` Class**: Denotes unary operations in the AST, such as negation or logical NOT, with a single operand node and the operator token, expanding the language's expressiveness in manipulating values.

20. **`ParseResult` Class**: Used within the parsing process to encapsulate the outcome, holding either the successfully parsed node or an encountered error, along with a count of advancements made during parsing, aiding in error handling and recovery.

21. **`Parser` Class**: Transforms the stream of tokens generated by the lexer into a structured AST based on the language's grammar, implementing parsing logic for expressions, variable assignments, and logical structures.

22. **`atom`, `power`, `factor`, `term`, `arith_expr`, `comp_expr`, `expr` Methods**: Constituent parsing functions within the `Parser` class, each handling different levels of expression complexity, from basic arithmetic to comparison and logical operations, structuring the language's grammar into a parseable hierarchy.

23. **`bin_op` Method**: General-purpose method in the `Parser` for

 parsing binary operations, utilizing a common pattern to reduce redundancy in handling various types of binary expressions.

24. **`RTResult` Class**: Manages the outcome of runtime evaluations, encapsulating either the resulting value of an expression or any runtime error that occurred, ensuring a clear distinction between successful execution and error states.

25. **`Number` Class**: Represents numerical values within the language's runtime, equipped with methods for performing arithmetic, comparison, and logical operations, integral to the language's capability to evaluate complex expressions.

26. **`Context` Class**: Captures the execution context in which code is evaluated, including the current scope's symbol table and references to parent contexts, critical for maintaining variable scope and function call contexts.

27. **`SymbolTable` Class**: Maintains a mapping of variable names to their values within a given execution context, supporting variable declaration, assignment, and lookup operations, essential for the language's variable management.

28. **`Interpreter` Class**: Executes the AST generated by the parser, visiting each node and performing the corresponding operations, from variable assignments to evaluating expressions, driving the language's runtime behavior.

29. **`run` Function**: The main entry point that orchestrates the entire process of lexing, parsing, and interpreting the source code, leveraging a global symbol table to maintain predefined values and variables, and returning the final result or any encountered errors.

                ###################################

1. **Lexing**: The `Lexer` class processes the input text to produce tokens (`Token` instances), recognizing not just numbers and operators, but also identifiers and keywords thanks to the inclusion of `LETTERS` and `LETTERS_DIGITS` in its logic. It categorizes characters into appropriate tokens, including handling of variable names and language keywords.

2. **Parsing**: The `Parser` class builds an Abstract Syntax Tree (AST) from the tokens generated by the lexer. It uses a broader set of nodes, including `NumberNode` for numeric literals, `BinOpNode` for binary operations, and `UnaryOpNode` for unary operations, as well as `VarAccessNode` and `VarAssignNode` for variable access and assignment. This structure allows the representation of more complex language constructs, including variable usage and manipulation.

3. **Interpreting**: The `Interpreter` class walks through the AST to evaluate the program. In addition to computing expressions, it also interprets variable assignments and accesses by interacting with a `SymbolTable` (not explicitly mentioned before but implied by the presence of variable-related nodes), which manages variable names and their values within the execution context.

4. **Error Handling**: Enhanced error handling is provided by specialized error classes (`Error`, `IllegalCharError`, `InvalidSyntaxError`, `RTError`), each designed for specific types of errors encountered during the different stages (lexing, parsing, runtime). The `RTError` class, in particular, includes a method to generate a traceback, providing a detailed path of execution leading up to the error, which is crucial for debugging.

5. **Execution Flow**: The `run` function orchestrates the entire process, starting with lexing the input to generate tokens, parsing these tokens into an AST, and finally interpreting the AST to execute the program. This function also establishes a global execution context and a symbol table (`global_symbol_table`), ensuring variables and their values are managed and accessible throughout the program's execution. Errors detected at any stage are systematically reported, offering clear insights into issues like undefined variables, syntax mistakes, or illegal characters, enhancing the developer's experience by making error diagnosis more straightforward.

########################### dao.py ##################################
                            ##
                            ##
                            ##
                            ##
                            ##
                            ##
################## highlight_error_location #########################

Calculate Indices: The function first calculates the start (idx_start) and end (idx_end) indices of the line or lines where the error occurred in the input text. This is done by finding the positions of newline characters (\n) before and after the error's location.
Generate Line(s) with Error: For each line involved in the error (from pos_start.ln to pos_end.ln), the function extracts the line from the input text and calculates where to start and end highlighting (col_start and col_end).
Highlight Error: It then appends this line to the result string and adds a new line underneath with caret symbols (^) pointing to the exact column(s) where the error was detected. This visual cue helps the user quickly identify the error's location.
Handle Tabs and Multiline: The function replaces tabs with spaces for consistent alignment and handles errors that span multiple lines by repeating this process for each line involved

################## highlight_error_location #########################